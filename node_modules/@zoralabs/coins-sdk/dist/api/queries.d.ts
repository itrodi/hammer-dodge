import { GetCoinCommentsData, GetCoinCommentsResponse, GetCoinData, GetCoinResponse, GetCoinsData, GetCoinsResponse, GetProfileBalancesData, GetProfileData, GetProfileResponse } from "../client/types.gen";
import { RequestOptionsType } from "./query-types";
type APIQueryDataResponse<T> = Promise<{
    data?: T;
}>;
export type { APIQueryDataResponse };
type GetCoinQuery = GetCoinData["query"];
export type { GetCoinQuery, GetCoinData };
export type { GetCoinResponse } from "../client/types.gen";
export type CoinData = NonNullable<GetCoinResponse["zora20Token"]>;
export declare const getCoin: (query: GetCoinQuery, options?: RequestOptionsType<GetCoinData>) => Promise<{
    data?: GetCoinResponse;
}>;
type GetCoinsQuery = {
    coinAddresses: string[];
    chainId?: number;
};
export type { GetCoinsQuery, GetCoinsData };
export type { GetCoinsResponse } from "../client/types.gen";
export declare const getCoins: ({ coinAddresses, chainId }: GetCoinsQuery, options?: RequestOptionsType<GetCoinsData>) => APIQueryDataResponse<GetCoinsResponse>;
type GetCoinCommentsQuery = GetCoinCommentsData["query"];
export type { GetCoinCommentsQuery, GetCoinCommentsData };
export type { GetCoinCommentsResponse } from "../client/types.gen";
export declare const getCoinComments: (query: GetCoinCommentsQuery, options?: RequestOptionsType<GetCoinCommentsData>) => APIQueryDataResponse<GetCoinCommentsResponse>;
type GetProfileQuery = GetProfileData["query"];
export type { GetProfileQuery, GetProfileData };
export type { GetProfileResponse } from "../client/types.gen";
export declare const getProfile: (query: GetProfileQuery, options?: RequestOptionsType<GetProfileData>) => APIQueryDataResponse<GetProfileResponse>;
type GetProfileBalancesQuery = GetProfileBalancesData["query"];
export type { GetProfileBalancesQuery, GetProfileBalancesData };
export type { GetProfileBalancesResponse } from "../client/types.gen";
export declare const getProfileBalances: (query: GetProfileBalancesData["query"], options?: RequestOptionsType<GetProfileBalancesData>) => Promise<(({
    data: undefined;
    error: unknown;
} | {
    data: {
        profile?: string;
        id?: string;
        handle?: string;
        avatar?: {
            previewImage?: string;
            blurhash?: string;
            small?: string;
        };
        coinBalances?: {
            count?: number;
            edges?: Array<{
                node?: {
                    balance?: string;
                    id?: string;
                    coin?: {
                        id?: string;
                        name?: string;
                        description?: string;
                        address?: string;
                        symbol?: string;
                        totalSupply?: string;
                        totalVolume?: string;
                        volume24h?: string;
                        createdAt?: string;
                        creatorAddress?: string;
                        creatorEarnings?: Array<{
                            amount?: {
                                currency?: {
                                    address?: string;
                                };
                                amountRaw?: string;
                                amountDecimal?: number;
                            };
                            amountUsd?: string;
                        }>;
                        marketCap?: string;
                        marketCapDelta24h?: string;
                        chainId?: number;
                        creatorProfile?: string;
                        handle?: string;
                        avatar?: {
                            previewImage?: string;
                            blurhash?: string;
                            small?: string;
                        };
                        media?: {
                            mimeType?: string;
                            originalUri?: string;
                            format?: string;
                            previewImage?: string;
                            medium?: string;
                            blurhash?: string;
                        };
                        transfers?: {
                            count?: number;
                        };
                        uniqueHolders?: number;
                        zoraComments?: {
                            pageInfo?: {
                                endCursor?: string;
                                hasNextPage?: boolean;
                            };
                            count?: number;
                            edges?: Array<{
                                node?: string;
                                txHash?: string;
                                comment?: string;
                                userAddress?: string;
                                timestamp?: number;
                                userProfile?: string;
                                id?: string;
                                handle?: string;
                                avatar?: {
                                    previewImage?: string;
                                    blurhash?: string;
                                    small?: string;
                                };
                            }>;
                        };
                    };
                };
            }>;
            pageInfo?: {
                hasNextPage?: boolean;
                endCursor?: string;
            };
        };
    };
    error: undefined;
}) & {
    request: Request;
    response: Response;
}) | {
    data: {
        profile?: string;
        id?: string;
        handle?: string;
        avatar?: {
            previewImage?: string;
            blurhash?: string;
            small?: string;
        };
        coinBalances?: {
            count?: number;
            edges?: Array<{
                node?: {
                    balance?: string;
                    id?: string;
                    coin?: {
                        id?: string;
                        name?: string;
                        description?: string;
                        address?: string;
                        symbol?: string;
                        totalSupply?: string;
                        totalVolume?: string;
                        volume24h?: string;
                        createdAt?: string;
                        creatorAddress?: string;
                        creatorEarnings?: Array<{
                            amount?: {
                                currency?: {
                                    address?: string;
                                };
                                amountRaw?: string;
                                amountDecimal?: number;
                            };
                            amountUsd?: string;
                        }>;
                        marketCap?: string;
                        marketCapDelta24h?: string;
                        chainId?: number;
                        creatorProfile?: string;
                        handle?: string;
                        avatar?: {
                            previewImage?: string;
                            blurhash?: string;
                            small?: string;
                        };
                        media?: {
                            mimeType?: string;
                            originalUri?: string;
                            format?: string;
                            previewImage?: string;
                            medium?: string;
                            blurhash?: string;
                        };
                        transfers?: {
                            count?: number;
                        };
                        uniqueHolders?: number;
                        zoraComments?: {
                            pageInfo?: {
                                endCursor?: string;
                                hasNextPage?: boolean;
                            };
                            count?: number;
                            edges?: Array<{
                                node?: string;
                                txHash?: string;
                                comment?: string;
                                userAddress?: string;
                                timestamp?: number;
                                userProfile?: string;
                                id?: string;
                                handle?: string;
                                avatar?: {
                                    previewImage?: string;
                                    blurhash?: string;
                                    small?: string;
                                };
                            }>;
                        };
                    };
                };
            }>;
            pageInfo?: {
                hasNextPage?: boolean;
                endCursor?: string;
            };
        };
    };
    request: Request;
    response: Response;
}>;
//# sourceMappingURL=queries.d.ts.map